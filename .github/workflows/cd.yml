name: CI/CD Main

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

  unit-tests:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Unit tests
        run: npm run test:unit

  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Build Docker image (local tag)
        run: docker build -t hello-world-service:local .

      - name: Run container for integration tests
        run: docker run -d --name integration -p 3000:3000 hello-world-service:local

      - name: Integration tests
        run: npm run test:integration

      - name: Stop container
        run: |
          docker stop integration
          docker rm integration

  build-and-push:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    outputs:
      VERSION: ${{ steps.semantic_release.outputs.VERSION }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Run Semantic Release
        id: semantic_release
        run: |
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        if: success()
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

      - name: Build & push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hello-world-service:${{ steps.semantic_release.outputs.VERSION }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hello-world-service:${{ steps.semantic_release.outputs.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name hello-world-eks --region eu-west-1

      - name: Set version from build-and-push
        run: |
          echo "IMAGE_VERSION=${{ needs.build-and-push.outputs.VERSION }}" >> $GITHUB_ENV

      - name: Update image in deployment.yaml
        run: |
          sed -i "s|granchetti/hello-world-service:.*|granchetti/hello-world-service:${{ env.IMAGE_VERSION }}|g" ${{ github.workspace }}/kubernetes/deployment.yaml

      - name: Apply the manifests
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/hello-world --timeout=90s
          LB=$(kubectl get svc hello-world-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Service is at http://$LB"
